<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[HTTP状态码(HTTP Status Code)]]></title>
    <url>%2F2018%2F12%2F20%2FhttpStatusCode%2F</url>
    <content type="text"><![CDATA[消息(临时响应) 这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。由于 HTTP/1.0 协议中没有定义任何 1xx 状态码，所以除非在某些试验条件下，服务器禁止向此类客户端发送 1xx 响应。 100 Continue 客户端应当继续发送请求。这个临时响应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应。 101 Switching Protocols 服务器已经理解了客户端的请求，并将通过Upgrade 消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到在Upgrade 消息头中定义的那些协议。只有在切换新的协议更有好处的时候才应该采取类似措施。例如，切换到新的HTTP 版本比旧版本更有优势，或者切换到一个实时且同步的协议以传送利用此类特性的资源。 102 Processing 由WebDAV（RFC 2518）扩展的状态码，代表处理将被继续执行。 成功 这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。 200 OK 请求已成功，请求所希望的响应头或数据体将随此响应返回。出现此状态码是表示正常状态。 201 Created 请求已经被实现，而且有一个新的资源已经依据请求的需要而建立，且其 URI 已经随Location 头信息返回。假如需要的资源无法及时建立的话，应当返回 ‘202 Accepted’。 202 Accepted 服务器已接受请求，但尚未处理。正如它可能被拒绝一样，最终该请求可能会也可能不会被执行。在异步操作的场合下，没有比发送这个状态码更方便的做法了。返回202状态码的响应的目的是允许服务器接受其他过程的请求（例如某个每天只执行一次的基于批处理的操作），而不必让客户端一直保持与服务器的连接直到批处理操作全部完成。在接受请求处理并返回202状态码的响应应当在返回的实体中包含一些指示处理当前状态的信息，以及指向处理状态监视器或状态预测的指针，以便用户能够估计操作是否已经完成。 203 Non-Authoritative Information 服务器已成功处理了请求，但返回的实体头部元信息不是在原始服务器上有效的确定集合，而是来自本地或者第三方的拷贝。当前的信息可能是原始版本的子集或者超集。例如，包含资源的元数据可能导致原始服务器知道元信息的超集。使用此状态码不是必须的，而且只有在响应不使用此状态码便会返回200 OK的情况下才是合适的。 204 No Content 服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了的元信息。响应可能通过实体头部的形式，返回新的或更新后的元信息。如果存在这些头部信息，则应当与所请求的变量相呼应。如果客户端是浏览器的话，那么用户浏览器应保留发送了该请求的页面，而不产生任何文档视图上的变化，即使按照规范新的或更新后的元信息应当被应用到用户浏览器活动视图中的文档。由于204响应被禁止包含任何消息体，因此它始终以消息头后的第一个空行结尾。 205 Reset Content 服务器成功处理了请求，且没有返回任何内容。但是与204响应不同，返回此状态码的响应要求请求者重置文档视图。该响应主要是被用于接受用户输入后，立即重置表单，以便用户能够轻松地开始另一次输入。与204响应一样，该响应也被禁止包含任何消息体，且以消息头后的第一个空行结束。 206 Partial Content 服务器已经成功处理了部分 GET 请求。类似于 FlashGet 或者迅雷这类的 HTTP下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。该请求必须包含 Range 头信息来指示客户端希望得到的内容范围，并且可能包含 If-Range 来作为请求条件。响应必须包含如下的头部域：Content-Range 用以指示本次响应中返回的内容的范围；如果是 Content-Type 为 multipart/byteranges 的多段下载，则每一 multipart 段中都应包含 Content-Range 域用以指示本段的内容范围。假如响应中包含 Content-Length，那么它的数值必须匹配它返回的内容范围的真实字节数。DateETag 和/或 Content-Location，假如同样的请求本应该返回200响应。Expires, Cache-Control，和/或 Vary，假如其值可能与之前相同变量的其他响应对应的值不同的话。假如本响应请求使用了 If-Range 强缓存验证，那么本次响应不应该包含其他实体头；假如本响应的请求使用了 If-Range 弱缓存验证，那么本次响应禁止包含其他实体头；这避免了缓存的实体内容和更新了的实体头信息之间的不一致。否则，本响应就应当包含所有本应该返回200响应中应当返回的所有实体头部域。假如 ETag 或 Last-Modified 头部不能精确匹配的话，则客户端缓存应禁止将206响应返回的内容与之前任何缓存过的内容组合在一起。 207 Multi-Status 由WebDAV(RFC 2518)扩展的状态码，代表之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码。 重定向 这类状态码代表需要客户端采取进一步的操作才能完成请求。通常，这些状态码用来重定向，后续的请求地址（重定向目标）在本次响应的 Location 域中指明。 当且仅当后续的请求所使用的方法是 GET 或者 HEAD 时，用户浏览器才可以在没有用户介入的情况下自动提交所需要的后续请求。客户端应当自动监测无限循环重定向（例如：A-&gt;A，或者A-&gt;B-&gt;C-&gt;A），因为这会导致服务器和客户端大量不必要的资源消耗。按照 HTTP/1.0 版规范的建议，浏览器不应自动访问超过5次的重定向。 300 Multiple Choices 被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。除非这是一个 HEAD 请求，否则该响应应当包括一个资源特性及地址的列表的实体，以便用户或浏览器从中选择最合适的重定向地址。这个实体的格式由 Content-Type 定义的格式所决定。浏览器可能根据响应的格式以及浏览器自身能力，自动作出最合适的选择。当然，RFC 2616规范并没有规定这样的自动选择该如何进行。如果服务器本身已经有了首选的回馈选择，那么在 Location 中应当指明这个回馈的 URI；浏览器可能会将这个 Location 值作为自动重定向的地址。此外，除非额外指定，否则这个响应也是可缓存的。 301 Moved Permanently 被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个 URI 之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。新的永久性的URI 应当在响应的 Location 域中返回。除非这是一个 HEAD 请求，否则响应的实体中应当包含指向新的 URI 的超链接及简短说明。如果这不是一个 GET 或者 HEAD 请求，因此浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。注意：对于某些使用 HTTP/1.0 协议的浏览器，当它们发送的 POST 请求得到了一个301响应的话，接下来的重定向请求将会变成 GET 方式。 302 Move temporarily 请求的资源临时从不同的 URI响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。上文有提及。如果这不是一个 GET 或者 HEAD 请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。注意：虽然RFC 1945和RFC 2068规范不允许客户端在重定向时改变请求的方法，但是很多现存的浏览器将302响应视作为303响应，并且使用 GET 方式访问在 Location 中规定的 URI，而无视原先请求的方法。状态码303和307被添加了进来，用以明确服务器期待客户端进行何种反应。 303 See Other 对应当前请求的响应可以在另一个 URI 上被找到，而且客户端应当采用 GET 的方式访问那个资源。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。这个新的 URI 不是原始资源的替代引用。同时，303响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。注意：许多 HTTP/1.1 版以前的浏览器不能正确理解303状态。如果需要考虑与这些浏览器之间的互动，302状态码应该可以胜任，因为大多数的浏览器处理302响应时的方式恰恰就是上述规范要求客户端处理303响应时应当做的。 304 Not Modified 如果客户端发送了一个带条件的 GET 请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个状态码。304响应禁止包含消息体，因此始终以消息头后的第一个空行结尾。该响应必须包含以下的头信息：Date，除非这个服务器没有时钟。假如没有时钟的服务器也遵守这些规则，那么代理服务器以及客户端可以自行将 Date 字段添加到接收到的响应头中去（正如RFC 2068中规定的一样），缓存机制将会正常工作。ETag 和/或 Content-Location，假如同样的请求本应返回200响应。Expires, Cache-Control，和/或Vary，假如其值可能与之前相同变量的其他响应对应的值不同的话。假如本响应请求使用了强缓存验证，那么本次响应不应该包含其他实体头；否则（例如，某个带条件的 GET 请求使用了弱缓存验证），本次响应禁止包含其他实体头；这避免了缓存了的实体内容和更新了的实体头信息之间的不一致。假如某个304响应指明了当前某个实体没有缓存，那么缓存系统必须忽视这个响应，并且重复发送不包含限制条件的请求。假如接收到一个要求更新某个缓存条目的304响应，那么缓存系统必须更新整个条目以反映所有在响应中被更新的字段的值。 305 Use Proxy 被请求的资源必须通过指定的代理才能被访问。Location 域中将给出指定的代理所在的 URI 信息，接收者需要重复发送一个单独的请求，通过这个代理才能访问相应资源。只有原始服务器才能建立305响应。注意：RFC 2068中没有明确305响应是为了重定向一个单独的请求，而且只能被原始服务器建立。忽视这些限制可能导致严重的安全后果。 306 Switch Proxy 在最新版的规范中，306状态码已经不再被使用。 307 Temporary Redirect 请求的资源临时从不同的URI 响应请求。新的临时性的URI 应当在响应的 Location 域中返回。除非这是一个HEAD 请求，否则响应的实体中应当包含指向新的URI 的超链接及简短说明。因为部分浏览器不能识别307响应，因此需要添加上述必要信息以便用户能够理解并向新的 URI 发出访问请求。如果这不是一个GET 或者 HEAD 请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。 请求错误 这类的状态码代表了客户端看起来可能发生了错误，妨碍了服务器的处理。除非响应的是一个 HEAD 请求，否则服务器就应该返回一个解释当前错误状况的实体，以及这是临时的还是永久性的状况。这些状态码适用于任何请求方法。浏览器应当向用户显示任何包含在此类错误响应中的实体内容。 如果错误发生时客户端正在传送数据，那么使用TCP的服务器实现应当仔细确保在关闭客户端与服务器之间的连接之前，客户端已经收到了包含错误信息的数据包。如果客户端在收到错误信息后继续向服务器发送数据，服务器的TCP栈将向客户端发送一个重置数据包，以清除该客户端所有还未识别的输入缓冲，以免这些数据被服务器上的应用程序读取并干扰后者。 400 Bad Request 语义有误，当前请求无法被服务器理解。除非进行修改，否则客户端不应该重复提交这个请求。 请求参数有误。 401 Unauthorized 当前请求需要用户验证。该响应必须包含一个适用于被请求资源的 WWW-Authenticate 信息头用以询问用户信息。客户端可以重复提交一个包含恰当的 Authorization 头信息的请求。如果当前请求已经包含了 Authorization 证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。参见RFC 2617。 402 Payment Required 该状态码是为了将来可能的需求而预留的。 403 Forbidden 服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个 HEAD 请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息。 404 Not Found 请求失败，请求所希望得到的资源未被在服务器上发现。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。出现这个错误的最有可能的原因是服务器端没有这个页面。 405 Method Not Allowed 请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个Allow 头信息用以表示出当前资源能够接受的请求方法的列表。鉴于 PUT，DELETE 方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回405错误。 406 Not Acceptable 请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体。除非这是一个 HEAD 请求，否则该响应就应当返回一个包含可以让用户或者浏览器从中选择最合适的实体特性以及地址列表的实体。实体的格式由 Content-Type 头中定义的媒体类型决定。浏览器可以根据格式及自身能力自行作出最佳选择。但是，规范中并没有定义任何作出此类自动选择的标准。 407 Proxy Authentication Required 与401响应类似，只不过客户端必须在代理服务器上进行身份验证。代理服务器必须返回一个 Proxy-Authenticate 用以进行身份询问。客户端可以返回一个 Proxy-Authorization 信息头用以验证。参见RFC 2617。 408 Request Timeout 请求超时。客户端没有在服务器预备等待的时间内完成一个请求的发送。客户端可以随时再次提交这一请求而无需进行任何更改。 409 Conflict 由于和被请求的资源的当前状态之间存在冲突，请求无法完成。这个代码只允许用在这样的情况下才能被使用：用户被认为能够解决冲突，并且会重新提交新的请求。该响应应当包含足够的信息以便用户发现冲突的源头。冲突通常发生于对 PUT 请求的处理中。例如，在采用版本检查的环境下，某次 PUT 提交的对特定资源的修改请求所附带的版本信息与之前的某个（第三方）请求向冲突，那么此时服务器就应该返回一个409错误，告知用户请求无法完成。此时，响应实体中很可能会包含两个冲突版本之间的差异比较，以便用户重新提交归并以后的新版本。 410 Gone 被请求的资源在服务器上已经不再可用，而且没有任何已知的转发地址。这样的状况应当被认为是永久性的。如果可能，拥有链接编辑功能的客户端应当在获得用户许可后删除所有指向这个地址的引用。如果服务器不知道或者无法确定这个状况是否是永久的，那么就应该使用404状态码。除非额外说明，否则这个响应是可缓存的。 410 响应的目的主要是帮助网站管理员维护网站，通知用户该资源已经不再可用，并且服务器拥有者希望所有指向这个资源的远端连接也被删除。这类事件在限时、增值服务中很普遍。同样，410响应也被用于通知客户端在当前服务器站点上，原本属于某个个人的资源已经不再可用。当然，是否需要把所有永久不可用的资源标记为’410 Gone’，以及是否需要保持此标记多长时间，完全取决于服务器拥有者。 411 Length Required 服务器拒绝在没有定义 Content-Length 头的情况下接受请求。在添加了表明请求消息体长度的有效 Content-Length 头之后，客户端可以再次提交该请求。 412 Precondition Failed 服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。这个状态码允许客户端在获取资源时在请求的元信息（请求头字段数据）中设置先决条件，以此避免该请求方法被应用到其希望的内容以外的资源上。 413 Request Entity Too Large 服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。此种情况下，服务器可以关闭连接以免客户端继续发送此请求。如果这个状况是临时的，服务器应当返回一个 Retry-After 的响应头，以告知客户端可以在多少时间以后重新尝试。 414 Request-URI Too Long 请求的URI 长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。这比较少见，通常的情况包括：本应使用POST方法的表单提交变成了GET方法，导致查询字符串（Query String）过长。重定向URI “黑洞”，例如每次重定向把旧的 URI 作为新的 URI 的一部分，导致在若干次重定向后 URI 超长。客户端正在尝试利用某些服务器中存在的安全漏洞攻击服务器。这类服务器使用固定长度的缓冲读取或操作请求的 URI，当 GET 后的参数超过某个数值后，可能会产生缓冲区溢出，导致任意代码被执行[1]。没有此类漏洞的服务器，应当返回414状态码。 415 Unsupported Media Type 对于当前请求的方法和所请求的资源，请求中提交的实体并不是服务器中所支持的格式，因此请求被拒绝。 416 Requested Range Not Satisfiable 如果请求中包含了 Range 请求头，并且 Range 中指定的任何数据范围都与当前资源的可用范围不重合，同时请求中又没有定义 If-Range 请求头，那么服务器就应当返回416状态码。假如 Range 使用的是字节范围，那么这种情况就是指请求指定的所有数据范围的首字节位置都超过了当前资源的长度。服务器也应当在返回416状态码的同时，包含一个 Content-Range 实体头，用以指明当前资源的长度。这个响应也被禁止使用 multipart/byteranges 作为其 Content-Type。 417 Expectation Failed 在请求头 Expect 中指定的预期内容无法被服务器满足，或者这个服务器是一个代理服务器，它有明显的证据证明在当前路由的下一个节点上，Expect 的内容无法被满足。 421 too many connections There are too many connections from your internet address从当前客户端所在的IP地址到服务器的连接数超过了服务器许可的最大范围。通常，这里的IP地址指的是从服务器上看到的客户端地址（比如用户的网关或者代理服务器地址）。在这种情况下，连接数的计算可能涉及到不止一个终端用户。 422 Unprocessable Entity 请求格式正确，但是由于含有语义错误，无法响应。（RFC 4918 WebDAV） 423 Locked 当前资源被锁定。（RFC 4918 WebDAV） 424 Failed Dependency 由于之前的某个请求发生的错误，导致当前请求失败，例如 PROPPATCH。（RFC 4918 WebDAV） 425 Unordered Collection 在WebDav Advanced Collections 草案中定义，但是未出现在《WebDAV 顺序集协议》（RFC 3658）中。 426 Upgrade Required 客户端应当切换到TLS/1.0。（RFC 2817） 449 Retry With 由微软扩展，代表请求应当在执行完适当的操作后进行重试。 451 Unavailable For Legal Reasons 该请求因法律原因不可用。（RFC 7725） 服务器错误 （5、6字头） 这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生，也有可能是服务器意识到以当前的软硬件资源无法完成对请求的处理。除非这是一个HEAD 请求，否则服务器应当包含一个解释当前错误状态以及这个状况是临时的还是永久的解释信息实体。浏览器应当向用户展示任何在当前响应中被包含的实体。 这些状态码适用于任何响应方法。 500 Internal Server Error 服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。一般来说，这个问题都会在服务器端的源代码出现错误时出现。 501 Not Implemented 服务器不支持当前请求所需要的某个功能。当服务器无法识别请求的方法，并且无法支持其对任何资源的请求。 502 Bad Gateway 作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。 503 Service Unavailable 由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是临时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个 Retry-After 头用以标明这个延迟时间。如果没有给出这个 Retry-After 信息，那么客户端应当以处理500响应的方式处理它。注意：503状态码的存在并不意味着服务器在过载的时候必须使用它。某些服务器只不过是希望拒绝客户端的连接。 504 Gateway Timeout 作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。注意：某些代理服务器在DNS查询超时时会返回400或者500错误 505 HTTP Version Not Supported 服务器不支持，或者拒绝支持在请求中使用的 HTTP 版本。这暗示着服务器不能或不愿使用与客户端相同的版本。响应中应当包含一个描述了为何版本不被支持以及服务器支持哪些协议的实体。 506 Variant Also Negotiates 由《透明内容协商协议》（RFC 2295）扩展，代表服务器存在内部配置错误：被请求的协商变元资源被配置为在透明内容协商中使用自己，因此在一个协商处理中不是一个合适的重点。 507 Insufficient Storage 服务器无法存储完成请求所必须的内容。这个状况被认为是临时的。WebDAV (RFC 4918) 509 Bandwidth Limit Exceeded 服务器达到带宽限制。这不是一个官方的状态码，但是仍被广泛使用。 510 Not Extended 获取资源所需要的策略并没有被满足。（RFC 2774） 600 Unparseable Response Headers 源站没有返回响应头部，只返回实体内容。]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[PHP 常用函数]]></title>
    <url>%2F2018%2F12%2F13%2Fphp-sum-1%2F</url>
    <content type="text"><![CDATA[json 字符串编码解码 json_encode 对变量进行 JSON 编码 1string json_encode ( mixed $value [, int $options = 0 [, int $depth = 512 ]] ) 返回字符串，包含了 value 值 JSON 形式的表示。编码受传入的 options 参数影响，此外浮点值的编码依赖于 serialize_precision。 value待编码的 value ，除了resource 类型之外，可以为任何数据类型。所有字符串数据的编码必须是 UTF-8。 options由以下常量组成的二进制掩码： JSON_HEX_QUOT, JSON_HEX_TAG, JSON_HEX_AMP, JSON_HEX_APOS, JSON_NUMERIC_CHECK, JSON_PRETTY_PRINT, JSON_UNESCAPED_SLASHES, JSON_FORCE_OBJECT, JSON_PRESERVE_ZERO_FRACTION, JSON_UNESCAPED_UNICODE, JSON_PARTIAL_OUTPUT_ON_ERROR depth设置最大深度。 必须大于0 json_decode 接受一个 JSON 编码的字符串并且把它转换为 PHP 变量 1mixed json_decode ( string $json [, bool $assoc = false [, int $depth = 512 [, int $options = 0 ]]] ) json待解码的 json string 格式的字符串,这个函数仅能处理 UTF-8 编码的数据 assoc当该参数为 TRUE 时，将返回 array 而非 object depth指定递归深度 optionsJSON解码的掩码选项。 现在有两个支持的选项。 第一个是JSON_BIGINT_AS_STRING， 用于将大整数转为字符串而非默认的float类型。第二个是 JSON_OBJECT_AS_ARRAY， 与将assoc设置为 TRUE 有相同的效果。 json_last_error1int json_last_error ( void ) 如果有，返回 JSON 编码解码时最后发生的错误 变量处理函数 boolval 获取变量的布尔值 doubleval,floatval intval get_defined_vars 此函数返回一个包含所有已定义变量列表的多维数组，这些变量包括环境变量、服务器变量和用户定义的变量 get_resource_type 此函数返回一个字符串，用于表示传递给它的 resource 的类型。如果参数不是合法的 resource，将产生错误。 gettype 返回 PHP 变量的类型 var.不要使用 gettype() 来测试某种类型，因为其返回的字符串在未来的版本中可能需要改变。此外，由于包含了字符串的比较，它的运行也是较慢的。使用 is_* 函数代替。 import_request_variables 将 GET／POST／Cookie 变量导入到全局作用域中。 1bool import_request_variables ( string $types [, string $prefix ] ) empty 检查一个变量是否为空当一个变量并不存在，或者它的值等同于FALSE，那么它会被认为不存在。如果变量不存在的话，empty()并不会产生警告当var存在，并且是一个非空非零的值时返回 FALSE 否则返回 TRUE以下的东西被认为是空的： “” (空字符串) 0 (作为整数的0) 0.0 (作为浮点数的0) “0” (作为字符串的0) NULL FALSE array() (一个空数组) $var; (一个声明了，但是没有值的变量) is_array 检测变量是否是数组 is_bool is_callable 验证变量的内容能否作为函数调用。 这可以检查包含有效函数名的变量，或者一个数组，包含了正确编码的对象以及函数名。 1bool is_callable ( callable $name [, bool $syntax_only = false [, string &amp;$callable_name ]] ) is_countable Verify that the contents of a variable is an array or an object implementing Countable is_double,is_float,is_real is_real,is_double是 is_float() 的别名函数 is_int,is_integer,is_long is_integer,is_long 都是 is_int() 的别名函数 is_iterable Verify that the contents of a variable is accepted by the iterable pseudo-type, i.e. that it is an array or an object implementing Traversable is_null is_numeric 检测变量是否为数字或数字字符串 is_object is_resource is_scalar 检测变量是否是一个标量,标量变量是指那些包含了 integer、float、string 或 boolean的变量，而 array、object 和 resource 则不是标量 is_string isset 检测变量是否已设置并且非 NULL 1bool isset ( mixed $var [, mixed $... ] ) null 字符（”\0”）并不等同于 PHP 的 NULL 常量 如果一次传入多个参数，那么 isset() 只有在全部参数都以被设置时返回 TRUE 计算过程从左至右，中途遇到没有设置的变量时就会立即停止 print_r 以人类易读的格式显示一个变量的信息 serialize 返回字符串，此字符串包含了表示 value 的字节流，可以存储于任何地方。这有利于存储或传递 PHP 的值，同时不丢失其类型和结构,可处理除了 resource 之外的任何类型当序列化对象时，PHP 将试图在序列动作之前调用该对象的成员函数 __sleep()。这样就允许对象在被序列化之前做任何清除操作 settype 1bool settype ( mixed &amp;$var , string $type ) 将变量 var 的类型设置成 type strval 返回 var 的 string 值,var 可以是任何标量类型。不能将 strval() 用于数组或对象 unserialize 对单一的已序列化的变量进行操作，将其转换回 PHP 的值若被解序列化的变量是一个对象，在成功地重新构造对象之后，PHP 会自动地试图去调用 __wakeup() 成员函数（如果存在的话） unset 销毁指定的变量如果在函数中 unset() 一个全局变量，则只是局部变量被销毁，而在调用环境中的变量将保持调用 unset() 之前一样的值。想在函数中 unset() 一个全局变量，可使用 $GLOBALS 数组来实现unset() 一个通过引用传递的变量，则只是局部变量被销毁，而在调用环境中的变量将保持调用 unset() 之前一样的值。如果在函数中 unset() 一个静态变量，那么在函数内部此静态变量将被销毁。但是，当再次调用此函数时，此静态变量将被复原为上次被销毁之前的值。 var_dump var_export 1mixed var_export ( mixed $expression [, bool $return ] ) 返回关于传递给该函数的变量的结构信息，它和 var_dump() 类似，不同的是其返回的表示是合法的 PHP 代码。可以通过将函数的第二个参数设置为 TRUE，从而返回变量的表示。 字符串函数 trim 去除字符串首尾处的空白字符（或者其他字符）]]></content>
      <categories>
        <category>技术</category>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu16.04安装最新版nodejs]]></title>
    <url>%2F2018%2F12%2F13%2Fnodejs-1%2F</url>
    <content type="text"><![CDATA[更新ubuntu软件源1234sudo apt-get updatesudo apt-get install -y python-software-properties software-properties-commonsudo add-apt-repository ppa:chris-lea/node.jssudo apt-get update 安装 nodejs123sudo apt-get install nodejssudo apt install nodejs-legacysudo apt install npm 更新npm的包镜像源，方便快速下载12sudo npm config set registry https://registry.npm.taobao.orgsudo npm config list 全局安装n管理器(用于管理nodejs版本)1sudo npm install n -g 安装最新的nodejs（stable版本）12sudo n stablesudo node -v]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TP5学习手记3(命令行)]]></title>
    <url>%2F2018%2F12%2F11%2FTP5Learn3%2F</url>
    <content type="text"><![CDATA[thinkphp 5.1 命令行参考官方文档 查看版本1php think version 生成模块 快速生成模块 生成一个test模块 1php think build --module test 批量生成模块 需要定义规则文件build.php并放入应用目录下面,默认的框架的根目录下面自带了一个build.php示例参考文件 1php think build 生成类文件 生成控制器 生成index模块的Blog控制器类库文件 1php think make:controller index/Blog 生成index模块的Blog控制器类库文件,无内部方法，空框架1php think make:controller index/Blog --plain 生成模型 1php think make:model index/Blog 生成中间件 1php think make:middleware Auth 创建验证器类 1&gt;php think make:validate index/User 生成类库映射文件 使用下面的指令生成类库映射文件，提高系统自动加载的性能1&gt;php think optimize:autoload 清除缓存文件 清除应用的缓存文件 1php think clear 清除某个指定目录下面的文件 1php think clear --path d:\www\tp5\runtime\log\ 清除日志目录 1php think clear --log 清除日志目录并删除空目录 1php think clear --log --dir 清除数据缓存目录 1php think clear --cache 清除数据缓存目录并删除空目录 1php think clear --cache --dir 清除路由缓存 1php think clear --route 生成配置缓存 为应用或者模块生成配置缓存文件默认生成应用的配置缓存文件，调用后会在runtime目录下面生成init.php文件，生成配置缓存文件后，应用目录下面的config.phpcommon.php以及tags.php不会被加载，被runtime/init.php取代。1php think optimize:config 成某个模块的配置缓存1php think optimize:config index 生成数据表字段缓存 字段缓存仅在部署模式下生效生成数据表字段信息缓存，提升数据库查询的性能，避免多余的查询。 常用指令1php think optimize:schema 指定数据库生成字段缓存（必须有用户权限） 1php think optimize:schema --db demo 根据模块来生成 读取index模块的模型来生成数据表字段缓存,没有继承think\Model类的（抽象）模型类不会生成 1php think optimize:schema --module index 单独更新某个数据表的缓存 1php think optimize:schema --table think_user 单独更新某个数据表的缓存(指定数据库) 1php think optimize:schema --table demo.think_user 生成路由映射缓存 路由映射缓存用于开启路由延迟解析的情况下，支持路由反解的URL生成，如果你没有开启路由延迟解析或者没有使用URL路由反解生成则不需要生成。1php think optimize:route 输出并生成路由列表 查看定义的路由列表 1php think route:list 不同的样式输出 box 样式 1php think route:list box box-double1php think route:list box-double markdown1php think route:list markdown 排序支持 支持排序的字段名包括：rule、route、name、method和domain（全部小写）按路由规则排序 1php think route:list -s rule 按请求类型排序1php think route:list -s method 输出详细信息1php think route:list -m]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>thinkphp5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nginx 常用指令汇总1]]></title>
    <url>%2F2018%2F12%2F06%2Fnginx-log%2F</url>
    <content type="text"><![CDATA[日志 access_log (官网参考) 指定是否关闭日志，日志文件的路径、格式名称等等 1234Syntax: access_log path [format [buffer=size] [gzip[=level]] [flush=time] [if=condition]]; access_log off;Default:access_log logs/access.log combined;Context:http, server, location, if in location, limit_except log_format (官网参考) 设置一个日志格式，其名称可以用在指令 access_log 的参数 12345Syntax: log_format name [escape=default|json|none] string ...;Default: log_format combined "...";Context:http 限制访问 allow （官网参考） 123Syntax: allow address | CIDR | unix: | all;Default: —Context: http, server, location, limit_except &lt; Allows access for the specified network or address. If the special value unix: is specified (1.5.1), allows access for all UNIX-domain sockets. deny (官网参考) 123Syntax: deny address | CIDR | unix: | all;Default: —Context: http, server, location, limit_except Denies access for the specified network or address. If the special value unix: is specified (1.5.1), denies access for all UNIX-domain sockets. 这里的 address 是与 nginx 直连的 remote_addr ,默认情况下，如果不修改 remote_addr 的默认值，其指向的是与nginx服务器直连的客户端的IP,如果是多层反代，需考虑替换 remote_addr ,否则限制访问的只是与 nginx 服务器直连的 下游 nginx 服务器。 set_real_ip_from (官网参考) 这个指令需要启用模块 ngx_http_realip_module,该模块默认没有编译，启用该模块，编译需增加参数 --with-http_realip_module 123Syntax: set_real_ip_from address | CIDR | unix:;Default: —Context: http, server, location 定义信任的地址范围，以启用客户端地址替换 real_ip_header (官网参考)1234Syntax: real_ip_header field | X-Real-IP | X-Forwarded-For | proxy_protocol;Default: real_ip_header X-Real-IP;Context: http, server, location 定义 remote_addr 的替换方式,默认使用 X-Real-IP]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySql 用户管理和授权]]></title>
    <url>%2F2018%2F11%2F15%2FMySql-2%2F</url>
    <content type="text"><![CDATA[用户管理 创建用户 12345678910 CREATE USER 'username'@'host' IDENTIFIED BY 'password'; ``` &gt;* username:将创建的用户名 &gt;* host: 指定该用户在哪个主机上可以登陆，如果是本地用户可用localhost，如果想让该用户可以从任意远程主机登陆，可以使用通配符% &gt;* password: 用户的登陆密码，密码可以为空，如果为空则该用户可以不需要密码登陆服务器* 删除用户 ```sql DROP USER 'username'@'host'; 修改密码 12345SET PASSWORD FOR 'username'@'host' = PASSWORD('newpassword');``` 修改当前登录用户的密码:```sqlSET PASSWORD = PASSWORD("newpassword"); 查询 1select host,user from mysql.user; 授权管理 授予权限 格式: grant 权限 on 数据库对象 to 用户@主机 1GRANT privileges ON databasename.tablename TO 'username'@'host' privileges：操作权限 * SELECT(column,column),INSERT,UPDATE,DELETE * CREATE,ALTER,DROP * INDEX,references * create temporary tables,create view * create routine,alter routine,execute databasename：数据库名 tablename：表名，如果要授予该用户对所有数据库和表的相应操作权限则可用表示，如.* 查看授权 查看自己的授权 1show grants; 查看其他人的授权 1show grants for 'user'@'host'; 撤销授权 类似于授权，将 grant 改为 revoke, to 改为 from 即可 grant, revoke 某用户权限后，该用户只有重新连接 MySQL 数据库，权限才能生效 如果想让授权的用户，也可以将这些权限 grant 给其他用户，需要选项 “grant option“]]></content>
      <categories>
        <category>技术</category>
        <category>数据库</category>
        <category>MySql</category>
      </categories>
      <tags>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Win2003下安装MySql 5.6.42]]></title>
    <url>%2F2018%2F11%2F15%2FWin2003-MySql5-6-42%2F</url>
    <content type="text"><![CDATA[下载 mysql-5.6.42-win32.zip解压到 E:\mysql-5.6.42-win32 操作系统是 32位Win2003&gt;MySql 5.7 会提示“不是有效的 Win32 应用程序”，该版本不适用 设置配置文件 复制 my-default.ini 到 my.ini,修改 my.ini 12345[mysqld]port=3306character_set_server=utf8mb4basedir=E:\\mysql-5.6.42-win32datadir=E:\\mysqldb\\data 将MySql安装目录下 data 下所有文件拷贝到 datadir(E:\mysqldb\data) 下 配置 MySql 为系统服务命令符界面下运行1234# 配置为系统服务E:\\mysql-5.6.42-win32\bin\mysqld.exe -install#启用MySQL服务net start mysql 卸载服务用mysqld.exe -remove 配置环境变量1sysdm.cpl 环境变量PATH增加 E:\mysql-5.6.42-win32\bin 设置MySql初始密码 启动MySql服务后，默认用户 root ， 密码为空, 仅本地登录mysql -uroot连接MySql123use mysql;update user set password=password("new password") where user="root";flush privileges;]]></content>
      <categories>
        <category>技术</category>
        <category>数据库</category>
        <category>MySql</category>
      </categories>
      <tags>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TP5学习手记2(开发规范和目录结构)]]></title>
    <url>%2F2018%2F11%2F06%2FTP5Learn2%2F</url>
    <content type="text"><![CDATA[开发规范目录和文件 目录命名用 小写 + 下划线 类库、函数文件统一以.php为后缀 类文件名均以命名空间定义，并且命名空间的路径和类库文件所在路径一致 类文件采用驼峰法命名（首字母大写），其它文件采用小写+下划线命名 类名和类文件名保持一致，统一采用驼峰法命名（首字母大写） 函数和类、属性命名 类的命名采用驼峰法（首字母大写），例如 User、UserType，默认不需要添加后缀，例如UserController应该直接命名为User； 函数的命名使用小写字母和下划线（小写字母开头）的方式，例如 get_client_ip； 方法的命名使用驼峰法（首字母小写），例如 getUserName； 属性的命名使用驼峰法（首字母小写），例如 tableName、instance； 特例：以双下划线打头的函数或方法作为魔术方法，例如 call 和 __autoload； 常量和配置 常量以大写字母和下划线命名，例如 APP_PATH； 配置参数以小写字母和下划线命名，例如 url_route_on 和url_convert； 环境变量定义使用大写字母和下划线命名，例如APP_DEBUG； 数据表和字段 数据表和字段采用小写加下划线方式命名，并注意字段名不要以下划线开头，例如 think_user 表和 user_name字段，不建议使用驼峰和中文作为数据表及字段命名。 目录结构1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859www WEB部署目录（或者子目录）├─application 应用目录│ ├─common 公共模块目录（可以更改）│ ├─module_name 模块目录│ │ ├─common.php 模块函数文件│ │ ├─controller 控制器目录│ │ ├─model 模型目录│ │ ├─view 视图目录│ │ ├─config 配置目录│ │ └─ ... 更多类库目录│ ││ ├─command.php 命令行定义文件│ ├─common.php 公共函数文件│ └─tags.php 应用行为扩展定义文件│├─config 应用配置目录│ ├─module_name 模块配置目录│ │ ├─database.php 数据库配置│ │ ├─cache 缓存配置│ │ └─ ... │ ││ ├─app.php 应用配置│ ├─cache.php 缓存配置│ ├─cookie.php Cookie配置│ ├─database.php 数据库配置│ ├─log.php 日志配置│ ├─session.php Session配置│ ├─template.php 模板引擎配置│ └─trace.php Trace配置│├─route 路由定义目录│ ├─route.php 路由定义│ └─... 更多│├─public WEB目录（对外访问目录）│ ├─index.php 入口文件│ ├─router.php 快速测试文件│ └─.htaccess 用于apache的重写│├─thinkphp 框架系统目录│ ├─lang 语言文件目录│ ├─library 框架类库目录│ │ ├─think Think类库包目录│ │ └─traits 系统Trait目录│ ││ ├─tpl 系统模板目录│ ├─base.php 基础定义文件│ ├─convention.php 框架惯例配置文件│ ├─helper.php 助手函数文件│ └─logo.png 框架LOGO文件│├─extend 扩展类库目录├─runtime 应用的运行时目录（可写，可定制）├─vendor 第三方类库目录（Composer依赖库）├─build.php 自动生成定义文件（参考）├─composer.json composer 定义文件├─LICENSE.txt 授权说明文件├─README.md README 文件├─think 命令行入口文件 官方参考]]></content>
      <categories>
        <category>技术</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>TP5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TP5学习手记1(搭建环境)]]></title>
    <url>%2F2018%2F11%2F02%2FTP5Learn1%2F</url>
    <content type="text"><![CDATA[安装 LANMP 安装 Ubuntu 16.04 一键包安装，采用wdlinux的一键包 123456789mkdir wdlinux; cd wdliunx wget http://dl.wdlinux.cn/files/lanmp_v3.tar.gztar zxvf lanmp_v3.tar.gz# 默认安装的是 PHP5 版本，修改安装的PHP版本为 7.2.11 以及相应下载地址sed -i 's/^PHP_VER.*/PHP_VER="7.2.11"/' lib/common.conf sed -i 's/^P7.*/P7=1/' lib/common.confsed -i 's/^PHP_URL.*/PHP_URL="http:\/\/cn2.php.net\/distributions\/php-7.2.11.tar.gz"/' lib/common.conf # 开始安装，选择4全部安装sudo ./lanmp.sh 安装后，会安装好 nginx，apache，mysql，php，并且可以通过 http://服务器IP:8080管理服务器 安装 Pdo_dblib,（用于连接mssql2005） freeTds 123456wget ftp://ftp.freetds.org/pub/freetds/stable/freetds-1.00.104.tar.gztar zxvf freetds-1.00.104.tar.gzcd freetds-1.00.104/./configure --prefix=/usr/local/freetds --with-tdsver=7.1 --enable-msdblibmakesudo make install 安装扩展 pdo_dblib 123456789101112cd ~/wdlinux/src/tar zxvf php-7.2.11.tar.gz cd php-7.2.11/ext/pdo_dblib//www/wdlinux/php/bin/phpize sudo ./configure --with-php-config=/www/wdlinux/php/bin/php-config --with-pdo-dblib=/usr/local/freetdssudo makesudo make install# 修改PHP的配置文件，增加扩展 pdo_dblibsed '$a/extension="/www/wdlinux/apache_php-7.2.11/lib/php/extensions/no-debug-non-zts-20170718/pdo_dblib.so"' /www/wdlinux/php/etc/php.ini# 检查cd ~/;echo "&lt;?php phpinfo();"&gt;info.php;/www/wdlinux/php/bin/php info.php|grep pdo_dblib 安装TP5 安装 composer 123456curl -sS https://getcomposer.org/installer | phpmv composer.phar /usr/local/bin/composer#使用国内镜像composer config -g repo.packagist composer https://packagist.phpcomposer.com#或者composer config -g repo.packagist composer https://packagist.laravel-china.org 创建TP5项目 1composer create-project topthink/think tp5 更新TP5框架 1composer update topthink/framework 修改框架以支持dblib连接Sqlsrv修改think\db\connector下的类Sqlsrv的parseDsn方法为： 123456$dsn = 'dblib:dbname=' . $config['database'] . ';host=' . $config['hostname'];if (!empty($config['hostport'])) &#123; //$dsn .= ',' . $config['hostport']; $dsn .= ':' . $config['hostport'];&#125;return $dsn; wdlinux一键包官网参考freetds稳定包下载本地下载lanmp_v3.tar.gz本地下载freetds-1.00.104.tar.gz官方手册ThinkPHP5.1完全开发手册]]></content>
      <categories>
        <category>技术</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>TP5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018年8月贵州行]]></title>
    <url>%2F2018%2F10%2F12%2FGuiZhou201808%2F</url>
    <content type="text"><![CDATA[8月11日贵阳北站 下午5点贵阳北，好大的贵阳北站！休息一个半小时转车遵义，本想到车站附近找点特色小吃，步行半小时都没出站，放弃了，在车站吃的晚餐，果然即贵又不好吃。 8月12日遵义 阳光明媚，天气很好，早上吃了遵义虾子羊肉粉，真的好好吃，和湖南吃到的遵义羊肉粉完全是两个味儿,感谢小娟同学的款待和全程陪同 遵义会址 红军山 遵义会址出来后，步行到红军山，从红军山山脚一直爬到凤凰楼，脚不是自己的了,两个小伙子表现出众 8月13日回到贵阳 进贵阳高铁上拍的，很壮观，很现代 二七路小吃街用的晚餐，贵州小吃一条吃，目不暇接 8月14日贵阳黔灵山公园 早餐花溪牛肉粉，名不虚传 贵州特色，花椒粉，自己添加 黔灵山公园大门 好多猴子，萌猴 侗家食府用的午餐，点了特色酸汤鱼，太重的山胡椒油味，最后还是经典的青椒炒肉下饭 8月15日西江苗寨 非常浓郁的苗族气息,一路上一会儿天晴一会儿小雨，小雨儿一阵阵的，果然是贵州天无三日晴 苗族长桌宴 8月16日小七孔 8月17日黄果树瀑布]]></content>
      <categories>
        <category>生活</category>
        <category>旅游</category>
      </categories>
      <tags>
        <tag>贵州</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[配置 Hexo]]></title>
    <url>%2F2018%2F10%2F11%2Fconfigure-hexo-1%2F</url>
    <content type="text"><![CDATA[站点配置 设定语言编辑站点配置文件，language: zh_CN 安装主题 next 下载 1git clone https://github.com/theme-next/hexo-theme-next.git themes/next 启用主题 修改站点配置文件， 找到 theme ，并将其值更改为 next 配置主题 next 选择 Scheme 修改主题配置文件 增加分类页、标签页 12hexo new page "categories"hexo new page "tags" 修改page “categories”的 front_matter 如下： 12type: "categories"comments: false #关闭评论 修改page “tags”的 front_matter 如下： 12type: "tags"comments: false 设置菜单 菜单增加“分类”、“标签” 编辑主题配置文件,找到如下配置，去掉注释# 12#tags: /tags/ || tags#categories: /categories/ || th 代码块增加按钮“复制” 修改主题配置文件codeblock.copy_button.enable = true 参考 next官网 Hexo中文]]></content>
      <categories>
        <category>技术</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Github + Hexo + Win7 安装手记]]></title>
    <url>%2F2018%2F10%2F10%2FGithub_Hexo%2F</url>
    <content type="text"><![CDATA[安装前提 nodejs git 注册配置Github 创建仓库(名称为 注册名.github.io) 配置SSH Key 123#在~/.ssh下生成id_rsa私钥和id_rsa.pub公钥ssh-keygen -t rsa -b 4096 -C "email地址" clip.exe &lt; ~/.ssh/id_rsa.pub 将剪贴板上的公钥部署到github中的 ssh key,实现免密部署 安装Hexo 建立文件夹 D:\hexo，Git Bash Here 安装 hexo 1npm install -g hexo-cli 建站 12hexo initnpm install 配置部署 1npm install hexo-deployer-git--save #支持hexo的git部署 打开文件 _config.yml,修改部署配置 12345#修改为git部署,注意：号后面必须带半角的空格deploy: type: git repo: git@github.com:注册名/注册名.github.io.git branch: master 123hexo clean #清除原来生成的静态内容hexo generate #生成静态网页hexo deploy #部署到github 此时可以打开 https://注册名.github.io 了，看到个人博客了 参考 Hexo中文]]></content>
      <categories>
        <category>技术</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
