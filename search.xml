<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Ubuntu16.04安装最新版nodejs]]></title>
    <url>%2F2018%2F12%2F13%2Fnodejs-1%2F</url>
    <content type="text"><![CDATA[更新ubuntu软件源1234sudo apt-get updatesudo apt-get install -y python-software-properties software-properties-commonsudo add-apt-repository ppa:chris-lea/node.jssudo apt-get update 安装 nodejs123sudo apt-get install nodejssudo apt install nodejs-legacysudo apt install npm 更新npm的包镜像源，方便快速下载12sudo npm config set registry https://registry.npm.taobao.orgsudo npm config list 全局安装n管理器(用于管理nodejs版本)1sudo npm install n -g 安装最新的nodejs（stable版本）12sudo n stablesudo node -v]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TP5学习手记3(命令行)]]></title>
    <url>%2F2018%2F12%2F11%2FTP5Learn3%2F</url>
    <content type="text"><![CDATA[thinkphp 5.1 命令行参考官方文档 查看版本1php think version 生成模块 快速生成模块 生成一个test模块 1php think build --module test 批量生成模块 需要定义规则文件build.php并放入应用目录下面,默认的框架的根目录下面自带了一个build.php示例参考文件 1php think build 生成类文件 生成控制器 生成index模块的Blog控制器类库文件 1php think make:controller index/Blog 生成index模块的Blog控制器类库文件,无内部方法，空框架1php think make:controller index/Blog --plain 生成模型 1php think make:model index/Blog 生成中间件 1php think make:middleware Auth 创建验证器类 1&gt;php think make:validate index/User 生成类库映射文件 使用下面的指令生成类库映射文件，提高系统自动加载的性能1&gt;php think optimize:autoload 清除缓存文件 清除应用的缓存文件 1php think clear 清除某个指定目录下面的文件 1php think clear --path d:\www\tp5\runtime\log\ 清除日志目录 1php think clear --log 清除日志目录并删除空目录 1php think clear --log --dir 清除数据缓存目录 1php think clear --cache 清除数据缓存目录并删除空目录 1php think clear --cache --dir 清除路由缓存 1php think clear --route 生成配置缓存 为应用或者模块生成配置缓存文件默认生成应用的配置缓存文件，调用后会在runtime目录下面生成init.php文件，生成配置缓存文件后，应用目录下面的config.phpcommon.php以及tags.php不会被加载，被runtime/init.php取代。1php think optimize:config 成某个模块的配置缓存1php think optimize:config index 生成数据表字段缓存 字段缓存仅在部署模式下生效生成数据表字段信息缓存，提升数据库查询的性能，避免多余的查询。 常用指令1php think optimize:schema 指定数据库生成字段缓存（必须有用户权限） 1php think optimize:schema --db demo 根据模块来生成 读取index模块的模型来生成数据表字段缓存,没有继承think\Model类的（抽象）模型类不会生成 1php think optimize:schema --module index 单独更新某个数据表的缓存 1php think optimize:schema --table think_user 单独更新某个数据表的缓存(指定数据库) 1php think optimize:schema --table demo.think_user 生成路由映射缓存 路由映射缓存用于开启路由延迟解析的情况下，支持路由反解的URL生成，如果你没有开启路由延迟解析或者没有使用URL路由反解生成则不需要生成。1php think optimize:route 输出并生成路由列表 查看定义的路由列表 1php think route:list 不同的样式输出 box 样式 1php think route:list box box-double1php think route:list box-double markdown1php think route:list markdown 排序支持 支持排序的字段名包括：rule、route、name、method和domain（全部小写）按路由规则排序 1php think route:list -s rule 按请求类型排序1php think route:list -s method 输出详细信息1php think route:list -m]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>thinkphp5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nginx 常用指令汇总1]]></title>
    <url>%2F2018%2F12%2F06%2Fnginx-log%2F</url>
    <content type="text"><![CDATA[日志 access_log (官网参考) 指定是否关闭日志，日志文件的路径、格式名称等等 1234Syntax: access_log path [format [buffer=size] [gzip[=level]] [flush=time] [if=condition]]; access_log off;Default:access_log logs/access.log combined;Context:http, server, location, if in location, limit_except log_format (官网参考) 设置一个日志格式，其名称可以用在指令 access_log 的参数 12345Syntax: log_format name [escape=default|json|none] string ...;Default: log_format combined "...";Context:http 限制访问 allow （官网参考） 123Syntax: allow address | CIDR | unix: | all;Default: —Context: http, server, location, limit_except &lt; Allows access for the specified network or address. If the special value unix: is specified (1.5.1), allows access for all UNIX-domain sockets. deny (官网参考) 123Syntax: deny address | CIDR | unix: | all;Default: —Context: http, server, location, limit_except Denies access for the specified network or address. If the special value unix: is specified (1.5.1), denies access for all UNIX-domain sockets. 这里的 address 是与 nginx 直连的 remote_addr ,默认情况下，如果不修改 remote_addr 的默认值，其指向的是与nginx服务器直连的客户端的IP,如果是多层反代，需考虑替换 remote_addr ,否则限制访问的只是与 nginx 服务器直连的 下游 nginx 服务器。 set_real_ip_from (官网参考) 这个指令需要启用模块 ngx_http_realip_module,该模块默认没有编译，启用该模块，编译需增加参数 --with-http_realip_module 123Syntax: set_real_ip_from address | CIDR | unix:;Default: —Context: http, server, location 定义信任的地址范围，以启用客户端地址替换 real_ip_header (官网参考)1234Syntax: real_ip_header field | X-Real-IP | X-Forwarded-For | proxy_protocol;Default: real_ip_header X-Real-IP;Context: http, server, location 定义 remote_addr 的替换方式,默认使用 X-Real-IP]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySql 用户管理和授权]]></title>
    <url>%2F2018%2F11%2F15%2FMySql-2%2F</url>
    <content type="text"><![CDATA[用户管理 创建用户 12345678910 CREATE USER 'username'@'host' IDENTIFIED BY 'password'; ``` &gt;* username:将创建的用户名 &gt;* host: 指定该用户在哪个主机上可以登陆，如果是本地用户可用localhost，如果想让该用户可以从任意远程主机登陆，可以使用通配符% &gt;* password: 用户的登陆密码，密码可以为空，如果为空则该用户可以不需要密码登陆服务器* 删除用户 ```sql DROP USER 'username'@'host'; 修改密码 12345SET PASSWORD FOR 'username'@'host' = PASSWORD('newpassword');``` 修改当前登录用户的密码:```sqlSET PASSWORD = PASSWORD("newpassword"); 查询 1select host,user from mysql.user; 授权管理 授予权限 格式: grant 权限 on 数据库对象 to 用户@主机 1GRANT privileges ON databasename.tablename TO 'username'@'host' privileges：操作权限 * SELECT(column,column),INSERT,UPDATE,DELETE * CREATE,ALTER,DROP * INDEX,references * create temporary tables,create view * create routine,alter routine,execute databasename：数据库名 tablename：表名，如果要授予该用户对所有数据库和表的相应操作权限则可用表示，如.* 查看授权 查看自己的授权 1show grants; 查看其他人的授权 1show grants for 'user'@'host'; 撤销授权 类似于授权，将 grant 改为 revoke, to 改为 from 即可 grant, revoke 某用户权限后，该用户只有重新连接 MySQL 数据库，权限才能生效 如果想让授权的用户，也可以将这些权限 grant 给其他用户，需要选项 “grant option“]]></content>
      <categories>
        <category>技术</category>
        <category>数据库</category>
        <category>MySql</category>
      </categories>
      <tags>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Win2003下安装MySql 5.6.42]]></title>
    <url>%2F2018%2F11%2F15%2FWin2003-MySql5-6-42%2F</url>
    <content type="text"><![CDATA[下载 mysql-5.6.42-win32.zip解压到 E:\mysql-5.6.42-win32 操作系统是 32位Win2003&gt;MySql 5.7 会提示“不是有效的 Win32 应用程序”，该版本不适用 设置配置文件 复制 my-default.ini 到 my.ini,修改 my.ini 12345[mysqld]port=3306character_set_server=utf8mb4basedir=E:\\mysql-5.6.42-win32datadir=E:\\mysqldb\\data 将MySql安装目录下 data 下所有文件拷贝到 datadir(E:\mysqldb\data) 下 配置 MySql 为系统服务命令符界面下运行1234# 配置为系统服务E:\\mysql-5.6.42-win32\bin\mysqld.exe -install#启用MySQL服务net start mysql 卸载服务用mysqld.exe -remove 配置环境变量1sysdm.cpl 环境变量PATH增加 E:\mysql-5.6.42-win32\bin 设置MySql初始密码 启动MySql服务后，默认用户 root ， 密码为空, 仅本地登录mysql -uroot连接MySql123use mysql;update user set password=password("new password") where user="root";flush privileges;]]></content>
      <categories>
        <category>技术</category>
        <category>数据库</category>
        <category>MySql</category>
      </categories>
      <tags>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TP5学习手记2(开发规范和目录结构)]]></title>
    <url>%2F2018%2F11%2F06%2FTP5Learn2%2F</url>
    <content type="text"><![CDATA[开发规范目录和文件 目录命名用 小写 + 下划线 类库、函数文件统一以.php为后缀 类文件名均以命名空间定义，并且命名空间的路径和类库文件所在路径一致 类文件采用驼峰法命名（首字母大写），其它文件采用小写+下划线命名 类名和类文件名保持一致，统一采用驼峰法命名（首字母大写） 函数和类、属性命名 类的命名采用驼峰法（首字母大写），例如 User、UserType，默认不需要添加后缀，例如UserController应该直接命名为User； 函数的命名使用小写字母和下划线（小写字母开头）的方式，例如 get_client_ip； 方法的命名使用驼峰法（首字母小写），例如 getUserName； 属性的命名使用驼峰法（首字母小写），例如 tableName、instance； 特例：以双下划线打头的函数或方法作为魔术方法，例如 call 和 __autoload； 常量和配置 常量以大写字母和下划线命名，例如 APP_PATH； 配置参数以小写字母和下划线命名，例如 url_route_on 和url_convert； 环境变量定义使用大写字母和下划线命名，例如APP_DEBUG； 数据表和字段 数据表和字段采用小写加下划线方式命名，并注意字段名不要以下划线开头，例如 think_user 表和 user_name字段，不建议使用驼峰和中文作为数据表及字段命名。 目录结构1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859www WEB部署目录（或者子目录）├─application 应用目录│ ├─common 公共模块目录（可以更改）│ ├─module_name 模块目录│ │ ├─common.php 模块函数文件│ │ ├─controller 控制器目录│ │ ├─model 模型目录│ │ ├─view 视图目录│ │ ├─config 配置目录│ │ └─ ... 更多类库目录│ ││ ├─command.php 命令行定义文件│ ├─common.php 公共函数文件│ └─tags.php 应用行为扩展定义文件│├─config 应用配置目录│ ├─module_name 模块配置目录│ │ ├─database.php 数据库配置│ │ ├─cache 缓存配置│ │ └─ ... │ ││ ├─app.php 应用配置│ ├─cache.php 缓存配置│ ├─cookie.php Cookie配置│ ├─database.php 数据库配置│ ├─log.php 日志配置│ ├─session.php Session配置│ ├─template.php 模板引擎配置│ └─trace.php Trace配置│├─route 路由定义目录│ ├─route.php 路由定义│ └─... 更多│├─public WEB目录（对外访问目录）│ ├─index.php 入口文件│ ├─router.php 快速测试文件│ └─.htaccess 用于apache的重写│├─thinkphp 框架系统目录│ ├─lang 语言文件目录│ ├─library 框架类库目录│ │ ├─think Think类库包目录│ │ └─traits 系统Trait目录│ ││ ├─tpl 系统模板目录│ ├─base.php 基础定义文件│ ├─convention.php 框架惯例配置文件│ ├─helper.php 助手函数文件│ └─logo.png 框架LOGO文件│├─extend 扩展类库目录├─runtime 应用的运行时目录（可写，可定制）├─vendor 第三方类库目录（Composer依赖库）├─build.php 自动生成定义文件（参考）├─composer.json composer 定义文件├─LICENSE.txt 授权说明文件├─README.md README 文件├─think 命令行入口文件 官方参考]]></content>
      <categories>
        <category>技术</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>TP5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TP5学习手记1(搭建环境)]]></title>
    <url>%2F2018%2F11%2F02%2FTP5Learn1%2F</url>
    <content type="text"><![CDATA[安装 LANMP 安装 Ubuntu 16.04 一键包安装，采用wdlinux的一键包 123456789mkdir wdlinux; cd wdliunx wget http://dl.wdlinux.cn/files/lanmp_v3.tar.gztar zxvf lanmp_v3.tar.gz# 默认安装的是 PHP5 版本，修改安装的PHP版本为 7.2.11 以及相应下载地址sed -i 's/^PHP_VER.*/PHP_VER="7.2.11"/' lib/common.conf sed -i 's/^P7.*/P7=1/' lib/common.confsed -i 's/^PHP_URL.*/PHP_URL="http:\/\/cn2.php.net\/distributions\/php-7.2.11.tar.gz"/' lib/common.conf # 开始安装，选择4全部安装sudo ./lanmp.sh 安装后，会安装好 nginx，apache，mysql，php，并且可以通过 http://服务器IP:8080管理服务器 安装 Pdo_dblib,（用于连接mssql2005） freeTds 123456wget ftp://ftp.freetds.org/pub/freetds/stable/freetds-1.00.104.tar.gztar zxvf freetds-1.00.104.tar.gzcd freetds-1.00.104/./configure --prefix=/usr/local/freetds --with-tdsver=7.1 --enable-msdblibmakesudo make install 安装扩展 pdo_dblib 123456789101112cd ~/wdlinux/src/tar zxvf php-7.2.11.tar.gz cd php-7.2.11/ext/pdo_dblib//www/wdlinux/php/bin/phpize sudo ./configure --with-php-config=/www/wdlinux/php/bin/php-config --with-pdo-dblib=/usr/local/freetdssudo makesudo make install# 修改PHP的配置文件，增加扩展 pdo_dblibsed '$a/extension="/www/wdlinux/apache_php-7.2.11/lib/php/extensions/no-debug-non-zts-20170718/pdo_dblib.so"' /www/wdlinux/php/etc/php.ini# 检查cd ~/;echo "&lt;?php phpinfo();"&gt;info.php;/www/wdlinux/php/bin/php info.php|grep pdo_dblib 安装TP5 安装 composer 123456curl -sS https://getcomposer.org/installer | phpmv composer.phar /usr/local/bin/composer#使用国内镜像composer config -g repo.packagist composer https://packagist.phpcomposer.com#或者composer config -g repo.packagist composer https://packagist.laravel-china.org 创建TP5项目 1composer create-project topthink/think tp5 更新TP5框架 1composer update topthink/framework 修改框架以支持dblib连接Sqlsrv修改think\db\connector下的类Sqlsrv的parseDsn方法为： 123456$dsn = 'dblib:dbname=' . $config['database'] . ';host=' . $config['hostname'];if (!empty($config['hostport'])) &#123; //$dsn .= ',' . $config['hostport']; $dsn .= ':' . $config['hostport'];&#125;return $dsn; wdlinux一键包官网参考freetds稳定包下载本地下载lanmp_v3.tar.gz本地下载freetds-1.00.104.tar.gz官方手册ThinkPHP5.1完全开发手册]]></content>
      <categories>
        <category>技术</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>TP5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018年8月贵州行]]></title>
    <url>%2F2018%2F10%2F12%2FGuiZhou201808%2F</url>
    <content type="text"><![CDATA[8月11日贵阳北站 下午5点贵阳北，好大的贵阳北站！休息一个半小时转车遵义，本想到车站附近找点特色小吃，步行半小时都没出站，放弃了，在车站吃的晚餐，果然即贵又不好吃。 8月12日遵义 阳光明媚，天气很好，早上吃了遵义虾子羊肉粉，真的好好吃，和湖南吃到的遵义羊肉粉完全是两个味儿,感谢小娟同学的款待和全程陪同 遵义会址 红军山 遵义会址出来后，步行到红军山，从红军山山脚一直爬到凤凰楼，脚不是自己的了,两个小伙子表现出众 8月13日回到贵阳 进贵阳高铁上拍的，很壮观，很现代 二七路小吃街用的晚餐，贵州小吃一条吃，目不暇接 8月14日贵阳黔灵山公园 早餐花溪牛肉粉，名不虚传 贵州特色，花椒粉，自己添加 黔灵山公园大门 好多猴子，萌猴 侗家食府用的午餐，点了特色酸汤鱼，太重的山胡椒油味，最后还是经典的青椒炒肉下饭 8月15日西江苗寨 非常浓郁的苗族气息,一路上一会儿天晴一会儿小雨，小雨儿一阵阵的，果然是贵州天无三日晴 苗族长桌宴 8月16日小七孔 8月17日黄果树瀑布]]></content>
      <categories>
        <category>生活</category>
        <category>旅游</category>
      </categories>
      <tags>
        <tag>贵州</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[配置 Hexo]]></title>
    <url>%2F2018%2F10%2F11%2Fconfigure-hexo-1%2F</url>
    <content type="text"><![CDATA[站点配置 设定语言编辑站点配置文件，language: zh_CN 安装主题 next 下载 1git clone https://github.com/theme-next/hexo-theme-next.git themes/next 启用主题 修改站点配置文件， 找到 theme ，并将其值更改为 next 配置主题 next 选择 Scheme 修改主题配置文件 增加分类页、标签页 12hexo new page "categories"hexo new page "tags" 修改page “categories”的 front_matter 如下： 12type: "categories"comments: false #关闭评论 修改page “tags”的 front_matter 如下： 12type: "tags"comments: false 设置菜单 菜单增加“分类”、“标签” 编辑主题配置文件,找到如下配置，去掉注释# 12#tags: /tags/ || tags#categories: /categories/ || th 代码块增加按钮“复制” 修改主题配置文件codeblock.copy_button.enable = true 参考 next官网 Hexo中文]]></content>
      <categories>
        <category>技术</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Github + Hexo + Win7 安装手记]]></title>
    <url>%2F2018%2F10%2F10%2FGithub_Hexo%2F</url>
    <content type="text"><![CDATA[安装前提 nodejs git 注册配置Github 创建仓库(名称为 注册名.github.io) 配置SSH Key 123#在~/.ssh下生成id_rsa私钥和id_rsa.pub公钥ssh-keygen -t rsa -b 4096 -C "email地址" clip.exe &lt; ~/.ssh/id_rsa.pub 将剪贴板上的公钥部署到github中的 ssh key,实现免密部署 安装Hexo 建立文件夹 D:\hexo，Git Bash Here 安装 hexo 1npm install -g hexo-cli 建站 12hexo initnpm install 配置部署 1npm install hexo-deployer-git--save #支持hexo的git部署 打开文件 _config.yml,修改部署配置 12345#修改为git部署,注意：号后面必须带半角的空格deploy: type: git repo: git@github.com:注册名/注册名.github.io.git branch: master 123hexo clean #清除原来生成的静态内容hexo generate #生成静态网页hexo deploy #部署到github 此时可以打开 https://注册名.github.io 了，看到个人博客了 参考 Hexo中文]]></content>
      <categories>
        <category>技术</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
